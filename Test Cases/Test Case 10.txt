int divideCounter = 0;
int conquerCounter = 0;

int[] mergeSortProper(int[] numberList, int low, int high) {
		divideCounter++;
		if(low < high) {
			int middle = (low + high) / 2;
			mergeSortProper(numberList, low, middle);
			mergeSortProper(numberList, middle + 1, high);
			merge(numberList, low, middle, high);
		}

		return numberList;
	}

void merge(int[] mergeList, int low, int mid, int high) {
		int leftSize = mid - low + 1;
		int rightSize = high - mid;

		//initialize left and right sub-array such that the corresponding elements from mergeList are copied to its left/right partition
		int[] leftArray = new int[leftSize + 1];
		int[] rightArray = new int[rightSize + 1];

		for(int i = 0; i < leftSize; i++) {
			leftArray[i] = mergeList[low + i];
		}

		for(int j = 0; j < rightSize; j++) {
			rightArray[j] = mergeList[mid + j + 1];
		}

		//add a sentinel value so that any compares with this will guarantee that the the list is already empty
		int sentinel = 9999999;
		leftArray[leftSize] = sentinel;
		rightArray[rightSize] = sentinel;

		//combine step
		int leftIndex = 0;
		int rightIndex = 0;
		for(int k = low; k <= high; k++) {
			//Debug.log(TAG, "Left: " +leftArray[leftIndex]+ " Right: " +rightArray[rightIndex]);
			if(leftArray[leftIndex] <= rightArray[rightIndex]) {
				mergeList[k] = leftArray[leftIndex];
				leftIndex++;
			}
			else {
				mergeList[k] = rightArray[rightIndex];
				rightIndex++;
			}
		}

		conquerCounter++;
	}

void main(){

	int arraySize;
	int number;



	listen ("How many numbers?", arraySize);

	int[] arr = new int[arraySize];

	for (int i = 0; i<arraySize; i++){

		listen ("Enter number:", number);
		arr[i] = number;
	}

	int[] sorted = mergeSortProper(arr, 0, arraySize);
	woof( "Sorted num using merge sort: ");
	for (int j = 0; j<arraySize; j++){
		int temp = sorted[j];
		woof(temp);
	}
	woofln("");

	woof("Divide steps: " + divideCounter + " Conquer steps: " + conquerCounter);

}
